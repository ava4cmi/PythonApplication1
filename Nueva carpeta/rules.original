import sys, traceback
from xml.dom.minidom import Document, parse

print "Loading Rules..."

#rules.py 
#""" Includes the Rules about the Common Weakness Scoring System and the CWE related to safety attributes

##  Each metric is composed by: ["Value", "Code", Weight]
##  Base Finding Metric Group:

TI = {"Critical":1.0,"High":0.9,"Medium":0.6,"Low":0.3,"None":0,"Default":0.6,"Unknown":0.5,"Not Applicable":1.0}
AP = {"Administrator":1.0,"Partially-Privileged User":0.9,"Regular User":0.7,"Guest":0.6,"None":0.1,"Default":0.7,"Unknown":1.0,"Not Applicable":1.0}
AL = {"Application":1.0,"System":0.9,"Network":0.7,"Enterprise":1.0,"Default":0.9,"Unknown":0.5,"Not Applicable":1.0}
IC = {"None":1.0,"Limited":0.9,"Moderate":0.7,"Indirect":0.5,"Best-Available":0.3,"Complete":0,"Default":0.6,"Unknown":0.5,"Not Applicable":1.0}
FC = {"Proven True":1.0,"Proven Locally True":0.8,"Proven False":0,"Default":0.8,"Unknown":0.5,"Not Applicable":1.0}

##  Attack Surface Metric Group:

RP = {"None":1.0,"Guest":0.9,"Regular User":0.7,"Partially-Privileged User":0.6,"Administrator":0.1,"Default":0.7,"Unknown":0.5,"Not Applicable":1.0}
RL = {"System":0.9,"Application":1.0,"Network":0.7,"Enterprise":1.0,"Default":0.9,"Unknown":0.5,"Not Applicable":1.0}
AV = {"Internet":1.0,"Intranet":0.8,"Private Network":0.8,"Adjacent Network":0.7,"Local":0.5,"Physical":0.2,"Default":0.75,"Unknown":0.5,"Not Applicable":1.0}
AS = {"Strong":0.7,"Moderate":0.8,"Weak":0.9,"None":1.0,"Default":0.85,"Unknown":0.5,"Not Applicable":1.0}
AI = {"None":1.0,"Single":0.8,"Multiple":0.5,"Default":0.8,"Unknown":0.5,"Not Applicable":1.0}
IN = {"Automated":1.0,"Limited/Typical":0.9,"Opportunistic":0.3,"High":0.1,"No Interaction":0,"Default":0.55,"Unknown":0.5,"Not Applicable":1.0}
SC = {"All":1.0,"Moderate":0.9,"Rare":0.5,"Potentially Reachable":0.1,"Default":0.7,"Unknown":0.5,"Not Applicable":1.0}

## Environmental Metric Group:
    
BI = {"Critical":1.0,"High":0.9,"Medium":0.6,"Low":0.3,"None":0,"Default":0.6,"Unknown":0.5,"Not Applicable":1.0}
DI = {"High":1.0,"Medium":0.6,"Low":0.2,"Default":0.6,"Unknown":0.5,"Not Applicable":1.0}
EX = {"High":1.0,"Medium":0.6,"Low":0.2,"None":0,"Default":0.6,"Unknown":0.5,"Not Applicable":1.0}
EC = {"None":1.0,"Limited":0.9,"Moderate":0.7,"Indirect":0.5,"Best-Available":0.3,"Complete":0.1,"Default":0.6,"Unknown":0.5,"Not Applicable":1.0}
RE = {"Extensive":1.0,"Moderate":0.9,"Limited":0.8,"Default":0.9,"Unknown":0.5,"Not Applicable":1.0}
P  = {"Widespread":1.0,"High":0.9,"Common":0.8,"Limited":0.7,"Default":0.85,"Unknown":0.5,"Not Applicable":1.0}

cweOwner = ["Administrator","Partially-Privileged User","Regular User","Guest","None","Default","Unknown","Not Applicable"]
cweUser = ["Administrator","Partially-Privileged User","Regular User","Guest","None","Default","Unknown","Not Applicable"]

#http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html
cweLang = ["C/C++","Java","Visual Basic","C#",".NET","Fortran","PHP","Python","Bash","Ruby","Perl","Javascript","PL/SQL","Matlab"]

cweUIcom = ["Yes","No"]
cweSanit = ["Yes","No"]
cweTrans = ["Yes","No"]
cweTransf = ["Yes","No"]
cweTrust = ["Yes","No"]
cweDBint = ["Yes","No"]
cweTime = ["Yes","No"]
cweMaxmin = ["Yes","No"]
cweCalltpf = ["Yes","No"]
cweSpoof = ["Yes","No"]
cweTamper = ["Yes","No"]
cweEncryp = ["Yes","No"]
cweAttach = ["Yes","No"]
cweDataf = ["JDL","RSL","ClassAdd","Submit","SQL","XML","PDF","DOC","XLS","TXT","CSV","RTF","HTML","Binary"]
cweUError = ["Yes","No"]
cweRemote = ["Yes","No"]
cweCliSer = ["Client","Server"]
cwePCWS = []

cweAtts = {"Owner":cweOwner,"User":cweUser,"Programming Language":cweLang,"User Interface":cweUIcom,"Sanitize":cweSanit,\
    "Transform Data":cweTrans,"Transfering Data":cweTransf,"Trust":cweTrust,"Database Interaction":cweDBint,\
    "Timeout Operations":cweTime,"Max/Min Operations":cweMaxmin,"Thirdparty Operations":cweCalltpf,"Spoofing":cweSpoof,\
    "Tampering":cweTamper,"Encryption":cweEncryp,"Attachment":cweAttach,"Data/File Format":cweDataf,\
    "Unexpected Error handling":cweUError,"Remote/External Operation":cweRemote,"Client/Server Installation":cweCliSer}

def reglas(cOwner,cUser,cLang,cUIcom,cSanit,cTrans,cTransf,cTrust,cDBint,cTime,cMaxmin,cCalltpf,cSpoof,cTamper,cEncryp,cAttach,cDataf,cUError,cRemote,cCliSer,cPCWS):

    ## Evaluating cOwner && cUser attributes with TI, AP, AL metrics.

    if ((cOwner=="Administrator") and ((cUser=="Administrator") or (cUser=="Partially-Privileged User") or (cUser=="Regular User") or (cUser=="Guest"))):
        TI_AP_AL = [["Technical Impact","Critical", TI.get("Critical")], ["Acquired Privilege","Administrator",AP.get("Administrator")],["Acquired Privilege Layer","Enterprise",AL.get("Enterprise")]]   
    elif ((cOwner=="Partially-Privileged User") and (cUser=="Administrator")):
        TI_AP_AL = [["Technical Impact","Critical", TI.get("Critical")], ["Acquired Privilege","Administrator",AP.get("Administrator")],["Acquired Privilege Layer","Enterprise",AL.get("Enterprise")]]
    elif ((cOwner=="Partially-Privileged User") and ((cUser=="Partially-Privileged User") or (cUser=="Regular User") or (cUser=="Guest"))):
        TI_AP_AL = [["Technical Impact","High", TI.get("High")], ["Acquired Privilege","Partially-Privileged User",AP.get("Partially-Privileged User")],["Acquired Privilege Layer","System",AL.get("System")]]
    elif ((cOwner=="Regular User") and (cUser=="Administrator")):
        TI_AP_AL = [["Technical Impact","Critical", TI.get("Critical")], ["Acquired Privilege","Administrator",AP.get("Administrator")],["Acquired Privilege Layer","Enterprise",AL.get("Enterprise")]]
    elif ((cOwner=="Regular User") and (cUser=="Partially-Privileged User")):
        TI_AP_AL = [["Technical Impact","High", TI.get("High")], ["Acquired Privilege","Partially-Privileged User",AP.get("Partially-Privileged User")],["Acquired Privilege Layer","System",AL.get("System")]]
    elif ((cOwner=="Regular User") and ((cUser=="Regular User") or (cUser=="Guest"))):
        TI_AP_AL = [["Technical Impact","Medium", TI.get("Medium")], ["Acquired Privilege","Regular User",AP.get("Regular User")],["Acquired Privilege Layer","Network",AL.get("Network")]]
    elif ((cOwner=="Guest") and (cUser=="Administrator")):
        TI_AP_AL = [["Technical Impact","Critical", TI.get("Critical")], ["Acquired Privilege","Administrator",AP.get("Administrator")],["Acquired Privilege Layer","Enterprise",AL.get("Enterprise")]]
    elif ((cOwner=="Guest") and (cUser=="Partially-Privileged User")):
        TI_AP_AL = [["Technical Impact","High", TI.get("High")], ["Acquired Privilege","Partially-Privileged User",AP.get("Partially-Privileged User")],["Acquired Privilege Layer","System",AL.get("System")]]
    elif ((cOwner=="Guest") and (cUser=="Regular User")):
        TI_AP_AL = [["Technical Impact","Medium", TI.get("Medium")], ["Acquired Privilege","Regular User",AP.get("Regular User")],["Acquired Privilege Layer","Network",AL.get("Network")]]
    elif ((cOwner=="Guest") and (cUser=="Guest")):
        TI_AP_AL = [["Technical Impact","Low", TI.get("Low")], ["Acquired Privilege","Guest",AP.get("Guest")],["Acquired Privilege Layer","Unknown",AL.get("Unknown")]]
    else:
        TI_AP_AL = [["Technical Impact","Unknown", TI.get("Unknown")], ["Acquired Privilege","Unknown",AP.get("Unknown")],["Acquired Privilege Layer","Unknown",AL.get("Unknown")]]

    oTI=TI_AP_AL[0][2]
    oAP=TI_AP_AL[1][2]
    AL1=TI_AP_AL[2][2]

        
    ## Evaluating cDBint && cRemote && cClient attributes with AL metrics.
    AL2=[]
    if ((cDBint=="Yes") and (cRemote=="Yes") and (cCliSer=="Server")):
        AL2 = ["Acquired Privilege Layer","Enterprise",AL.get("Enterprise")]
    elif ((cDBint=="Yes") and (cRemote=="Yes") and (cCliSer=="Client")):
        AL2 = ["Acquired Privilege Layer","Network",AL.get("Network")]
    elif ((cDBint=="Yes") and (cRemote=="No") and (cCliSer=="Server")):
        AL2 = ["Acquired Privilege Layer","System",AL.get("System")]
    elif ((cDBint=="Yes") and (cRemote=="No") and (cCliSer=="Client")):
        AL2 = ["Acquired Privilege Layer","Network",AL.get("Network")] 
    elif ((cDBint=="No") and (cRemote=="Yes") and (cCliSer=="Server")):
        AL2 = ["Acquired Privilege Layer","Enterprise",AL.get("Enterprise")]
    elif ((cDBint=="No") and (cRemote=="Yes") and (cCliSer=="Client")):
        AL2 = ["Acquired Privilege Layer","System",AL.get("System")]
    elif ((cDBint=="No") and (cRemote=="No") and (cCliSer=="Server")):
        AL2 = ["Acquired Privilege Layer","Network",AL.get("Network")]
    elif ((cDBint=="No") and (cRemote=="No") and (cCliSer=="Client")):
        AL2 = ["Acquired Privilege Layer","Unknown",AL.get("Unknown")]
    else:
        AL2 = ["Acquired Privilege Layer","Unknown",AL.get("Unknown")]
    
    oAL = max(AL1,AL2[2])

    ## Evaluating cSanit && cTrust && cTrans && cTransf attributes with IC metrics.
    IC1=[]
    if ((cSanit=="Yes") and (cTrust=="Yes") and (cTrans=="Yes") and (cTransf=="Yes")):
        IC1 = ["Internal Control Effectiveness","Limited",IC.get("Limited")]
    elif ((cSanit=="Yes") and (cTrust=="Yes") and (cTrans=="Yes") and (cTransf=="No")):
        IC1 = ["Internal Control Effectiveness","Moderate",IC.get("Moderate")]
    elif ((cSanit=="Yes") and (cTrust=="Yes") and (cTrans=="No") and (cTransf=="No")):
        IC1 = ["Internal Control Effectiveness","Moderate",IC.get("Moderate")]
    elif ((cSanit=="Yes") and (cTrust=="No") and (cTrans=="No") and (cTransf=="No")):
        IC1 = ["Internal Control Effectiveness","Best-Available",IC.get("Best-Available")]
    elif ((cSanit=="No") and (cTrust=="No") and (cTrans=="No") and (cTransf=="No")):
        IC1 = ["Internal Control Effectiveness","Limited",IC.get("Limited")]
    elif ((cSanit=="No") and (cTrust=="No") and (cTrans=="No") and (cTransf=="Yes")):
        IC1 = ["Internal Control Effectiveness","Limited",IC.get("Limited")]
    elif ((cSanit=="No") and (cTrust=="No") and (cTrans=="Yes") and (cTransf=="Yes")):
        IC1 = ["Internal Control Effectiveness","Moderate",IC.get("Moderate")]
    elif ((cSanit=="No") and (cTrust=="Yes") and (cTrans=="Yes") and (cTransf=="Yes")):
        IC1 = ["Internal Control Effectiveness","None",IC.get("None")]
    else:
        IC1 = ["Internal Control Effectiveness","Unknown",AL.get("Unknown")]
    
    oIC=IC1[2]
     
    ## Evaluating RP metric.

    RP1 = ["Required Privilege",cUser,RP.get(cUser)]
    oRP=RP1[2]

    ## Evaluating RL metric.

    RL1 = ["Required Privilege Layer","Application",RL.get("Application")]
    oRL=RL1[2]

    ## Evaluating cUIcom && cDBint && cCalltpf && cRemote with AV metric.

    if ((cUIcom=="Yes") and (cDBint=="Yes") and ((cCalltpf=="Yes") or (cRemote=="Yes"))):
        AV1 = ["Access Vector","Private Network",AV.get("Private Network")]     
    elif ((cUIcom=="Yes") and (cDBint=="Yes") and ((cCalltpf=="No") or (cRemote=="No"))):
        AV1 = ["Access Vector","Adjacent Network",AV.get("Adjacent Network")]        
    elif ((cUIcom=="Yes") and (cDBint=="No") and (cRemote=="No")):
        AV1 = ["Access Vector","Local",AV.get("Local")]
    elif ((cUIcom=="No") and (cDBint=="Yes") and (cRemote=="Yes")):
        AV1 = ["Access Vector","Private Network",AV.get("Private Network")]
    else:
        AV1 = ["Access Vector","Unknown",AV.get("Unknown")]

    oAV=AV1[2] 
    
    ## Evaluating cTrust && cCalltpf && cRemote with AS metric.

    if ((cTrust=="Yes") and ((cCalltpf=="Yes") or (cRemote=="Yes"))):
        AS_AI = [["Authentication Strength","Default",AS.get("Default")],["Authentication Instances","Single",AI.get("Single")]]
    elif ((cTrust=="No") and ((cCalltpf=="Yes") or (cRemote=="Yes"))):
        AS_AI = [["Authentication Strength","Moderate",AS.get("Moderate")],["Authentication Instances","Single",AI.get("Single")]]  
    elif ((cTrust=="Yes") and ((cCalltpf=="Yes") and (cRemote=="Yes"))):
        AS_AI = [["Authentication Strength","Default",AS.get("Default")],["Authentication Instances","Multiple",AI.get("Multiple")]]
    elif ((cTrust=="No") and ((cCalltpf=="Yes") and (cRemote=="Yes"))):
        AS_AI = [["Authentication Strength","Moderate",AS.get("Moderate")],["Authentication Instances","Multiple",AI.get("Multiple")]]
    else:
        AS_AI = [["Authentication Strength","Unknown",AS.get("Unknown")],["Authentication Instances","Unknown",AI.get("Unknown")]]
    
    oAS=AS_AI[0][2]
    oAI=AS_AI[1][2]

    ## Evaluating cUIcom && cAttach with IN metric.

    if (cUIcom=="No"):
        IN1 = ["Level of Interaction","Automated",IN.get("Automated")]
    elif (cUIcom=="Yes" and cAttach=="Yes"):
        IN1 = ["Level of Interaction","Opportunistic",IN.get("Opportunistic")]
    else:
        IN1 = ["Level of Interaction","Unknown",IN.get("Unknown")]
    
    oIN=IN1[2]

    ## Evaluating cLang &&  cDataf with SC metric.        

    if (cLang=="C/C++" or cLang=="Java" or cLang=="Fortran" or cLang=="Python" or cLang=="Javascript" or cLang=="PHP" or cLang=="Ruby"):
        SC1 = ["Deployment Scope","Moderate",SC.get("Moderate")]
    elif ((cLang=="Bash" or cLang=="Visual Basic" or cLang=="C#" or cLang==".NET" or cLang=="PL/SQL" or cLang=="Matlab") and (cDataf=="DOC" or cDataf=="XLS" or cDataf=="EXE" or cDataf=="SQL")):
        SC1 = ["Deployment Scope","Rare",SC.get("Rare")]
    else:
        SC1 = ["Deployment Scope","Unknown",SC.get("Unknown")]

    oSC=SC1[2]

    ## Evaluating cDBint && cSpoof && cTamper && cEncryp with BI metric.  
    
    if ((cDBint=="Yes") and (cSpoof=="Yes") and (cTamper=="Yes") and (cEncryp=="Yes")):
        BI1 = ["Business Impact","Low",BI.get("Low")]
    elif ((cDBint=="Yes") and (cSpoof=="Yes") or (cTamper=="Yes") or (cEncryp=="Yes")):
        BI1 = ["Business Impact","High",BI.get("High")]
    elif ((cDBint=="No") and (cSpoof=="Yes") and (cTamper=="Yes") and (cEncryp=="Yes")):
        BI1 = ["Business Impact","None",BI.get("None")]
    elif ((cDBint=="No") and (cSpoof=="Yes") or (cTamper=="Yes") or (cEncryp=="Yes")):
        BI1 = ["Business Impact","Medium",BI.get("Medium")]
    else:
        BI1 = ["Business Impact","Unknown",BI.get("Unknown")]

    oBI=BI1[2]

    ## Evaluating cLang cUIcom cSanit cDBint cTime cMaxmin cSpoof cTamper cEncryp cAttach cUError cCliSer with DI EX metrics.        
    DI_EX=[]

    if (cLang=="C/C++" or cLang=="Java" or cLang=="Fortran" or cLang=="Visual Basic" or cLang=="C#" or cLang==".NET"):
        DI_EX = [["Likelihood of Discovery","Low",DI.get("Low")], ["Likelihood of Exploit","Low",DI.get("Low")]]
        if (cUIcom=="No" and cSanit=="Yes" and cDBint=="No" and cTime=="No" and cMaxmin=="No"):
            DI_EX = [["Likelihood of Discovery","Low",DI.get("Low")], ["Likelihood of Exploit","Low",DI.get("Low")]]
            if (cSpoof=="Yes" and cTamper=="Yes" and cEncryp=="Yes" and cUError=="Yes"):
                DI_EX = [["Likelihood of Discovery","Low",DI.get("Low")], ["Likelihood of Exploit","Low",DI.get("Low")]]
                if (cAttach=="No" and cCliSer=="Server"):
                    DI_EX = [["Likelihood of Discovery","Low",DI.get("Low")], ["Likelihood of Exploit","Low",DI.get("Low")]]
    elif (cLang=="PHP" or cLang=="Python" or cLang=="Ruby" or cLang=="PL/SQL" or cLang=="Matlab" or cLang=="Perl" or cLang=="Javascript"):
        DI_EX = [["Likelihood of Discovery","High",DI.get("High")], ["Likelihood of Exploit","High",DI.get("High")]]
        if (cUIcom=="Yes" and cSanit=="No" and (cDBint=="Yes" or cDBint=="No") and cTime=="Yes" and cMaxmin=="Yes"):
            DI_EX = [["Likelihood of Discovery","High",DI.get("High")], ["Likelihood of Exploit","High",DI.get("High")]]
            if (cSpoof=="No" and cTamper=="No" and cEncryp=="No"):
                DI_EX = [["Likelihood of Discovery","High",DI.get("High")], ["Likelihood of Exploit","High",DI.get("High")]]
                if (cAttach=="Yes" and cCliSer=="Client"):
                    DI_EX = [["Likelihood of Discovery","High",DI.get("High")], ["Likelihood of Exploit","High",DI.get("High")]]
    else:
        DI_EX = [["Likelihood of Discovery","Unknown",DI.get("Unknown")], ["Likelihood of Exploit","Unknown",DI.get("Unknown")]]
    
    oDI=DI_EX[0][2]
    oEX=DI_EX[1][2]

    ## Evaluating cCalltpf && cRemote with EC metric.        

    if (cCalltpf=="Yes" or cRemote=="Yes"):
        EC1 = ["External Control Effectiveness","Limited",EC.get("Limited")]
    else:
        EC1 = ["External Control Effectiveness","Unknown",EC.get("Unknown")]

    oEC=EC1[2]

    ## Evaluating cLang && cCalltpf && cRemote && cCliSer with RE metric.        

    if ((cLang=="C/C++" or cLang=="Java" or cLang=="Fortran" or cLang=="Visual Basic" or cLang=="C#" or cLang==".NET") and cCliSer=="Server"):
        RE1 = ["Remediation Effort","Moderate",RE.get("Moderate")]
        if (cCalltpf=="Yes" or cRemote=="Yes"):
            RE1 = ["Remediation Effort","Extensive",RE.get("Extensive")]
    elif ((cLang=="PHP" or cLang=="Python" or cLang=="Ruby" or cLang=="PL/SQL" or cLang=="Matlab" or cLang=="Perl" or cLang=="Javascript") and cCliSer=="Client"):
        RE1 = ["Remediation Effort","Limited",RE.get("Limited")]
        if (cCalltpf=="Yes" or cRemote=="Yes"):
            RE1 = ["Remediation Effort","Moderate",RE.get("Moderate")]
    else:
        RE1 = ["Remediation Effort","Unknown",RE.get("Unknown")]

    oRE=RE1[2]
    
    Base = cwssBaseF(oTI,oAP,oAL,oIC,0)
    Attack = cwssAttackS(oRP,oRL,oAV,oAS,oAI,oIN,oSC)
    Env = cwssEnv(oBI,oDI,oEX,oEC,oRE,0)

    score = [Base, Attack, Env]

    return score

def cwssBaseF(TI,AP,AL,IC,FC):
    
    if (TI > 0):
        fTI=1
        score = (((10 * TI) + (5 * (AP + AL)) + (5 * FC)) * fTI) * 4.0
    else:
        fTI=0
        score = (((10 * TI) + (5 * (AP + AL)) + (5 * FC)) * fTI) * 4.0
    
    return score

def cwssAttackS(RP,RL,AV,AS,AI,IN,SC):

    score = ((20 * (RP + RL + AV)) + (20 * SC) + (10 * IN) + (5 * (AS + AI))) / 100.0

    return score

def cwssEnv(BI,DI,EX,EC,RE,P):

    if (BI>0):
        fBI=1
        score = ((((10 * BI) + (3 * (DI + EX)) + (3 * P) + RE) * fBI) * EC) / 20.0
    else:
        fBI=0
        score = ((((10 * BI) + (3 * (DI + EX)) + (3 * P) + RE) * fBI) * EC) / 20.0

    return score


def rulexml():
    #create the minidom document
    doc = Document()

    #create the <static> base element
    rules = doc.createElement("rules")
    doc.appendChild(rules)

    for i in cweAtts.keys():
        safetyatt = doc.createElement("SafetyAttribute")
        nameatt = doc.createElement("Name")
        nameatt.setAttribute("name",i)    
        safetyatt.appendChild(nameatt)
    
        aux = cweAtts.get(i)
    
        for j in range(0,len(aux)):
            tmp=""
            tmp += aux[j]
            valueatt = doc.createElement("Value")    
            valueatt.setAttribute("value",tmp)
            metricas=reglas(i,tmp,'')
            for k in range(0,len(metricas)):
                metrics = doc.createElement("Metric")
                metrics.setAttribute("metric",metricas[k][0])
                metrics.setAttribute("value",metricas[k][1])
                metrics.setAttribute("score",str(metricas[k][2]))
                valueatt.appendChild(metrics)
                            
            nameatt.appendChild(valueatt)

        rules.appendChild(safetyatt)

    file = open("rules.xml","wb")
    try:
        file.write(doc.toprettyxml(indent="  ",encoding="UTF-8"))
    finally:
        file.close()

    return 0

print "Rules Loaded!!!"